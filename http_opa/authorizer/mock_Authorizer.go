// Code generated by mockery v2.40.1. DO NOT EDIT.

package authorizer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthorizer is an autogenerated mock type for the Authorizer type
type MockAuthorizer struct {
	mock.Mock
}

type MockAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizer) EXPECT() *MockAuthorizer_Expecter {
	return &MockAuthorizer_Expecter{mock: &_m.Mock}
}

// Evaluate provides a mock function with given fields: ctx, fullMethod, req, opaEvaluator
func (_m *MockAuthorizer) Evaluate(ctx context.Context, fullMethod string, req interface{}, opaEvaluator OpaEvaluator) (bool, context.Context, error) {
	ret := _m.Called(ctx, fullMethod, req, opaEvaluator)

	if len(ret) == 0 {
		panic("no return value specified for Evaluate")
	}

	var r0 bool
	var r1 context.Context
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, OpaEvaluator) (bool, context.Context, error)); ok {
		return rf(ctx, fullMethod, req, opaEvaluator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, OpaEvaluator) bool); ok {
		r0 = rf(ctx, fullMethod, req, opaEvaluator)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, OpaEvaluator) context.Context); ok {
		r1 = rf(ctx, fullMethod, req, opaEvaluator)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}, OpaEvaluator) error); ok {
		r2 = rf(ctx, fullMethod, req, opaEvaluator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthorizer_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type MockAuthorizer_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - ctx context.Context
//   - fullMethod string
//   - req interface{}
//   - opaEvaluator OpaEvaluator
func (_e *MockAuthorizer_Expecter) Evaluate(ctx interface{}, fullMethod interface{}, req interface{}, opaEvaluator interface{}) *MockAuthorizer_Evaluate_Call {
	return &MockAuthorizer_Evaluate_Call{Call: _e.mock.On("Evaluate", ctx, fullMethod, req, opaEvaluator)}
}

func (_c *MockAuthorizer_Evaluate_Call) Run(run func(ctx context.Context, fullMethod string, req interface{}, opaEvaluator OpaEvaluator)) *MockAuthorizer_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(OpaEvaluator))
	})
	return _c
}

func (_c *MockAuthorizer_Evaluate_Call) Return(_a0 bool, _a1 context.Context, _a2 error) *MockAuthorizer_Evaluate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthorizer_Evaluate_Call) RunAndReturn(run func(context.Context, string, interface{}, OpaEvaluator) (bool, context.Context, error)) *MockAuthorizer_Evaluate_Call {
	_c.Call.Return(run)
	return _c
}

// OpaQuery provides a mock function with given fields: ctx, decisionDocument, opaReq, opaResp
func (_m *MockAuthorizer) OpaQuery(ctx context.Context, decisionDocument string, opaReq interface{}, opaResp interface{}) error {
	ret := _m.Called(ctx, decisionDocument, opaReq, opaResp)

	if len(ret) == 0 {
		panic("no return value specified for OpaQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, decisionDocument, opaReq, opaResp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorizer_OpaQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpaQuery'
type MockAuthorizer_OpaQuery_Call struct {
	*mock.Call
}

// OpaQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - decisionDocument string
//   - opaReq interface{}
//   - opaResp interface{}
func (_e *MockAuthorizer_Expecter) OpaQuery(ctx interface{}, decisionDocument interface{}, opaReq interface{}, opaResp interface{}) *MockAuthorizer_OpaQuery_Call {
	return &MockAuthorizer_OpaQuery_Call{Call: _e.mock.On("OpaQuery", ctx, decisionDocument, opaReq, opaResp)}
}

func (_c *MockAuthorizer_OpaQuery_Call) Run(run func(ctx context.Context, decisionDocument string, opaReq interface{}, opaResp interface{})) *MockAuthorizer_OpaQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockAuthorizer_OpaQuery_Call) Return(_a0 error) *MockAuthorizer_OpaQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorizer_OpaQuery_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) error) *MockAuthorizer_OpaQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizer creates a new instance of MockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizer {
	mock := &MockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
