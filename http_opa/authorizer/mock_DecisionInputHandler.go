// Code generated by mockery v2.40.1. DO NOT EDIT.

package authorizer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDecisionInputHandler is an autogenerated mock type for the DecisionInputHandler type
type MockDecisionInputHandler struct {
	mock.Mock
}

type MockDecisionInputHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecisionInputHandler) EXPECT() *MockDecisionInputHandler_Expecter {
	return &MockDecisionInputHandler_Expecter{mock: &_m.Mock}
}

// GetDecisionInput provides a mock function with given fields: ctx, fullMethod, req
func (_m *MockDecisionInputHandler) GetDecisionInput(ctx context.Context, fullMethod string, req interface{}) (*DecisionInput, error) {
	ret := _m.Called(ctx, fullMethod, req)

	if len(ret) == 0 {
		panic("no return value specified for GetDecisionInput")
	}

	var r0 *DecisionInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*DecisionInput, error)); ok {
		return rf(ctx, fullMethod, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *DecisionInput); ok {
		r0 = rf(ctx, fullMethod, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DecisionInput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, fullMethod, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDecisionInputHandler_GetDecisionInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecisionInput'
type MockDecisionInputHandler_GetDecisionInput_Call struct {
	*mock.Call
}

// GetDecisionInput is a helper method to define mock.On call
//   - ctx context.Context
//   - fullMethod string
//   - req interface{}
func (_e *MockDecisionInputHandler_Expecter) GetDecisionInput(ctx interface{}, fullMethod interface{}, req interface{}) *MockDecisionInputHandler_GetDecisionInput_Call {
	return &MockDecisionInputHandler_GetDecisionInput_Call{Call: _e.mock.On("GetDecisionInput", ctx, fullMethod, req)}
}

func (_c *MockDecisionInputHandler_GetDecisionInput_Call) Run(run func(ctx context.Context, fullMethod string, req interface{})) *MockDecisionInputHandler_GetDecisionInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockDecisionInputHandler_GetDecisionInput_Call) Return(_a0 *DecisionInput, _a1 error) *MockDecisionInputHandler_GetDecisionInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDecisionInputHandler_GetDecisionInput_Call) RunAndReturn(run func(context.Context, string, interface{}) (*DecisionInput, error)) *MockDecisionInputHandler_GetDecisionInput_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDecisionInputHandler creates a new instance of MockDecisionInputHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecisionInputHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecisionInputHandler {
	mock := &MockDecisionInputHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
